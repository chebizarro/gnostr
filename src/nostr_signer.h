/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __NOSTR_SIGNER_H__
#define __NOSTR_SIGNER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.nostr.Signer */

#define TYPE_COM_NOSTR_SIGNER (com_nostr_signer_get_type ())
#define COM_NOSTR_SIGNER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_COM_NOSTR_SIGNER, ComNostrSigner))
#define IS_COM_NOSTR_SIGNER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_COM_NOSTR_SIGNER))
#define COM_NOSTR_SIGNER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_COM_NOSTR_SIGNER, ComNostrSignerIface))

struct _ComNostrSigner;
typedef struct _ComNostrSigner ComNostrSigner;
typedef struct _ComNostrSignerIface ComNostrSignerIface;

struct _ComNostrSignerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_decrypt_zap_event) (
    ComNostrSigner *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_eventJson,
    const gchar *arg_current_user);

  gboolean (*handle_get_public_key) (
    ComNostrSigner *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_nip04_decrypt) (
    ComNostrSigner *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_encryptedText,
    const gchar *arg_pubKey,
    const gchar *arg_current_user);

  gboolean (*handle_nip04_encrypt) (
    ComNostrSigner *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_plaintext,
    const gchar *arg_pubKey,
    const gchar *arg_current_user);

  gboolean (*handle_nip44_decrypt) (
    ComNostrSigner *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_encryptedText,
    const gchar *arg_pubKey,
    const gchar *arg_current_user);

  gboolean (*handle_nip44_encrypt) (
    ComNostrSigner *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_plaintext,
    const gchar *arg_pubKey,
    const gchar *arg_current_user);

  gboolean (*handle_sign_event) (
    ComNostrSigner *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_eventJson,
    const gchar *arg_current_user);

};

GType com_nostr_signer_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *com_nostr_signer_interface_info (void);
guint com_nostr_signer_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void com_nostr_signer_complete_get_public_key (
    ComNostrSigner *object,
    GDBusMethodInvocation *invocation,
    const gchar *npub);

void com_nostr_signer_complete_sign_event (
    ComNostrSigner *object,
    GDBusMethodInvocation *invocation,
    const gchar *signature);

void com_nostr_signer_complete_nip04_encrypt (
    ComNostrSigner *object,
    GDBusMethodInvocation *invocation,
    const gchar *encryptedText);

void com_nostr_signer_complete_nip44_encrypt (
    ComNostrSigner *object,
    GDBusMethodInvocation *invocation,
    const gchar *encryptedText);

void com_nostr_signer_complete_nip04_decrypt (
    ComNostrSigner *object,
    GDBusMethodInvocation *invocation,
    const gchar *plaintext);

void com_nostr_signer_complete_nip44_decrypt (
    ComNostrSigner *object,
    GDBusMethodInvocation *invocation,
    const gchar *plaintext);

void com_nostr_signer_complete_decrypt_zap_event (
    ComNostrSigner *object,
    GDBusMethodInvocation *invocation,
    const gchar *decryptedEvent);



/* D-Bus method calls: */
void com_nostr_signer_call_get_public_key (
    ComNostrSigner *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean com_nostr_signer_call_get_public_key_finish (
    ComNostrSigner *proxy,
    gchar **out_npub,
    GAsyncResult *res,
    GError **error);

gboolean com_nostr_signer_call_get_public_key_sync (
    ComNostrSigner *proxy,
    gchar **out_npub,
    GCancellable *cancellable,
    GError **error);

void com_nostr_signer_call_sign_event (
    ComNostrSigner *proxy,
    const gchar *arg_eventJson,
    const gchar *arg_current_user,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean com_nostr_signer_call_sign_event_finish (
    ComNostrSigner *proxy,
    gchar **out_signature,
    GAsyncResult *res,
    GError **error);

gboolean com_nostr_signer_call_sign_event_sync (
    ComNostrSigner *proxy,
    const gchar *arg_eventJson,
    const gchar *arg_current_user,
    gchar **out_signature,
    GCancellable *cancellable,
    GError **error);

void com_nostr_signer_call_nip04_encrypt (
    ComNostrSigner *proxy,
    const gchar *arg_plaintext,
    const gchar *arg_pubKey,
    const gchar *arg_current_user,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean com_nostr_signer_call_nip04_encrypt_finish (
    ComNostrSigner *proxy,
    gchar **out_encryptedText,
    GAsyncResult *res,
    GError **error);

gboolean com_nostr_signer_call_nip04_encrypt_sync (
    ComNostrSigner *proxy,
    const gchar *arg_plaintext,
    const gchar *arg_pubKey,
    const gchar *arg_current_user,
    gchar **out_encryptedText,
    GCancellable *cancellable,
    GError **error);

void com_nostr_signer_call_nip44_encrypt (
    ComNostrSigner *proxy,
    const gchar *arg_plaintext,
    const gchar *arg_pubKey,
    const gchar *arg_current_user,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean com_nostr_signer_call_nip44_encrypt_finish (
    ComNostrSigner *proxy,
    gchar **out_encryptedText,
    GAsyncResult *res,
    GError **error);

gboolean com_nostr_signer_call_nip44_encrypt_sync (
    ComNostrSigner *proxy,
    const gchar *arg_plaintext,
    const gchar *arg_pubKey,
    const gchar *arg_current_user,
    gchar **out_encryptedText,
    GCancellable *cancellable,
    GError **error);

void com_nostr_signer_call_nip04_decrypt (
    ComNostrSigner *proxy,
    const gchar *arg_encryptedText,
    const gchar *arg_pubKey,
    const gchar *arg_current_user,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean com_nostr_signer_call_nip04_decrypt_finish (
    ComNostrSigner *proxy,
    gchar **out_plaintext,
    GAsyncResult *res,
    GError **error);

gboolean com_nostr_signer_call_nip04_decrypt_sync (
    ComNostrSigner *proxy,
    const gchar *arg_encryptedText,
    const gchar *arg_pubKey,
    const gchar *arg_current_user,
    gchar **out_plaintext,
    GCancellable *cancellable,
    GError **error);

void com_nostr_signer_call_nip44_decrypt (
    ComNostrSigner *proxy,
    const gchar *arg_encryptedText,
    const gchar *arg_pubKey,
    const gchar *arg_current_user,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean com_nostr_signer_call_nip44_decrypt_finish (
    ComNostrSigner *proxy,
    gchar **out_plaintext,
    GAsyncResult *res,
    GError **error);

gboolean com_nostr_signer_call_nip44_decrypt_sync (
    ComNostrSigner *proxy,
    const gchar *arg_encryptedText,
    const gchar *arg_pubKey,
    const gchar *arg_current_user,
    gchar **out_plaintext,
    GCancellable *cancellable,
    GError **error);

void com_nostr_signer_call_decrypt_zap_event (
    ComNostrSigner *proxy,
    const gchar *arg_eventJson,
    const gchar *arg_current_user,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean com_nostr_signer_call_decrypt_zap_event_finish (
    ComNostrSigner *proxy,
    gchar **out_decryptedEvent,
    GAsyncResult *res,
    GError **error);

gboolean com_nostr_signer_call_decrypt_zap_event_sync (
    ComNostrSigner *proxy,
    const gchar *arg_eventJson,
    const gchar *arg_current_user,
    gchar **out_decryptedEvent,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_COM_NOSTR_SIGNER_PROXY (com_nostr_signer_proxy_get_type ())
#define COM_NOSTR_SIGNER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_COM_NOSTR_SIGNER_PROXY, ComNostrSignerProxy))
#define COM_NOSTR_SIGNER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_COM_NOSTR_SIGNER_PROXY, ComNostrSignerProxyClass))
#define COM_NOSTR_SIGNER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_COM_NOSTR_SIGNER_PROXY, ComNostrSignerProxyClass))
#define IS_COM_NOSTR_SIGNER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_COM_NOSTR_SIGNER_PROXY))
#define IS_COM_NOSTR_SIGNER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_COM_NOSTR_SIGNER_PROXY))

typedef struct _ComNostrSignerProxy ComNostrSignerProxy;
typedef struct _ComNostrSignerProxyClass ComNostrSignerProxyClass;
typedef struct _ComNostrSignerProxyPrivate ComNostrSignerProxyPrivate;

struct _ComNostrSignerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ComNostrSignerProxyPrivate *priv;
};

struct _ComNostrSignerProxyClass
{
  GDBusProxyClass parent_class;
};

GType com_nostr_signer_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ComNostrSignerProxy, g_object_unref)
#endif

void com_nostr_signer_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ComNostrSigner *com_nostr_signer_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
ComNostrSigner *com_nostr_signer_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void com_nostr_signer_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
ComNostrSigner *com_nostr_signer_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
ComNostrSigner *com_nostr_signer_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_COM_NOSTR_SIGNER_SKELETON (com_nostr_signer_skeleton_get_type ())
#define COM_NOSTR_SIGNER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_COM_NOSTR_SIGNER_SKELETON, ComNostrSignerSkeleton))
#define COM_NOSTR_SIGNER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_COM_NOSTR_SIGNER_SKELETON, ComNostrSignerSkeletonClass))
#define COM_NOSTR_SIGNER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_COM_NOSTR_SIGNER_SKELETON, ComNostrSignerSkeletonClass))
#define IS_COM_NOSTR_SIGNER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_COM_NOSTR_SIGNER_SKELETON))
#define IS_COM_NOSTR_SIGNER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_COM_NOSTR_SIGNER_SKELETON))

typedef struct _ComNostrSignerSkeleton ComNostrSignerSkeleton;
typedef struct _ComNostrSignerSkeletonClass ComNostrSignerSkeletonClass;
typedef struct _ComNostrSignerSkeletonPrivate ComNostrSignerSkeletonPrivate;

struct _ComNostrSignerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ComNostrSignerSkeletonPrivate *priv;
};

struct _ComNostrSignerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType com_nostr_signer_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ComNostrSignerSkeleton, g_object_unref)
#endif

ComNostrSigner *com_nostr_signer_skeleton_new (void);


G_END_DECLS

#endif /* __NOSTR_SIGNER_H__ */
